Exploit a Smart Contract (Burning Ring of Fire 3)
Objective: exploit flaws in a smart contract to buy a Bored Sporc NFT.
Reference: https://github.com/QPetabyte/Merkle_Trees.git
Method: there is a terminal with a website that validates if you are on the pre-sale list. The website uses a smart contract and merkle tree to do the validation. Instead of keeping the merkle root hash safe on the smart contract, it is passed along in the HTTP request. So build your own merkle tree and HTTP request.

1) Clone the git repo in the reference above (same as in the hint)
  ~$ git clone https://github.com/QPetabyte/Merkle_Trees.git
  ~$ cd Merkle_Trees/

2) Follow instructions in the repo to start the docker container. Might have to start the docker daemon.
  ~$ sudo dockerd

3) Update the merkle_tree.py script with your wallet address.
  ~$ nano merkle_tree.py

4) The line starts with "allowlist =" without quotes. Replace the hex string in the first array index with your wallet address.

5) Run the python script to get both the proof and the root hashes.
  ~$ python3 merkle_tree.py

6) Back to the game, access web browser's Dev Console (press F12), access the NFT terminal in the game, enter random values in the validation form, and have Validate Only checked. Copy the HTTP request from the Network tab: Right click > Copy > Copy as cURL (bash).

7) Paste it into your bash shell. Use your wallet address for the value of the WalletID parameter. Use the root and proof values from step 5 for the values of the Root and Proof parameters respectively.

8) Confirm you got a successful reply.

9) Approve the 100KC to the wallet address on the validation website.

10) Replay the CURL command from step 7 and change the value for the Validate parameter to false.

11) Success!